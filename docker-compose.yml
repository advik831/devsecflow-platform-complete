version: '3.8'

services:
  # PostgreSQL Database Service
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${DB_NAME:-devops_platform}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - devops-platform
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-devops_platform}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Main Application Service
  app:
    build: .
    environment:
      NODE_ENV: production
      PORT: 5000
      DATABASE_MODE: ${DATABASE_MODE:-bundled}
      DATABASE_URL: ${DATABASE_URL:-postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@db:5432/${DB_NAME:-devops_platform}}
      SESSION_SECRET: ${SESSION_SECRET:-your-session-secret-change-in-production}
      # GitHub integration (optional)
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID:-}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET:-}
      # Database connection details
      DB_HOST: ${DB_HOST:-db}
      DB_PORT: ${DB_PORT:-5432}
      DB_NAME: ${DB_NAME:-devops_platform}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_SSL: ${DB_SSL:-false}
      RUN_MIGRATIONS: ${RUN_MIGRATIONS:-false}
    ports:
      - "5000:5000"
    networks:
      - devops-platform
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./uploads:/app/uploads

  # Database Migration Service (runs once)
  migrate:
    build: .
    environment:
      NODE_ENV: production
      DATABASE_MODE: ${DATABASE_MODE:-bundled}
      DATABASE_URL: ${DATABASE_URL:-postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@db:5432/${DB_NAME:-devops_platform}}
      DB_HOST: ${DB_HOST:-db}
      DB_PORT: ${DB_PORT:-5432}
      DB_NAME: ${DB_NAME:-devops_platform}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_SSL: ${DB_SSL:-false}
    networks:
      - devops-platform
    depends_on:
      db:
        condition: service_healthy
    command: npm run db:push
    restart: "no"

networks:
  devops-platform:
    driver: bridge

volumes:
  postgres_data:
    driver: local